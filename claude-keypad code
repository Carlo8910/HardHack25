#include <Keypad.h>
#include <LiquidCrystal.h>

// Define the rows and columns of the keypad (keeping original configuration)
const byte ROWS = 4;
const byte COLS = 4;
char keys[ROWS][COLS] = {
  {'1', '2', '3', 'A'},
  {'4', '5', '6', 'B'},
  {'7', '8', '9', 'C'},
  {'*', '0', '#', 'D'}
};

// Keep original pin configurations
byte rowPins[ROWS] = {A0, A1, A2, A3};  
byte colPins[COLS] = {A4, A5, A6, A7};

// Create the keypad object with original settings
Keypad keypad = Keypad(makeKeymap(keys), rowPins, colPins, ROWS, COLS);

// LCD configuration (adjust pins as needed for your setup)
const int rs = 12, en = 11, d4 = 5, d5 = 4, d6 = 3, d7 = 2;
LiquidCrystal lcd(lcd_rs, lcd_en, d4, d5, d6, d7);

// Time variables
String currentTime = "";    // Store current time input
String reminderTime = "";   // Store reminder time input
bool timeSet = false;      // Track if current time is set
bool reminderSet = false;  // Track if reminder time is set
unsigned long timerDuration = 0;
unsigned long lastMillis = 0;

void setup() {
  Serial.begin(9600);
  lcd.begin(16, 2);
  lcd.print("Set current time:");
  lcd.setCursor(0, 1);
  lcd.print("Format: HHMM");
  delay(2000);
}

// Function to validate time input
bool isValidTime(String time) {
  if (time.length() != 4) return false;
  
  int hours = time.substring(0,2).toInt();
  int minutes = time.substring(2,4).toInt();
  
  return (hours >= 0 && hours < 24 && minutes >= 0 && minutes < 60);
}

void loop() {
  char key = keypad.getKey();
  
  if (key) {
    Serial.println(key); // Debug output
    
    if (!timeSet) {
      if (isdigit(key)) {
        if (currentTime.length() < 4) {
          currentTime += key;
          lcd.setCursor(currentTime.length()-1, 1);
          lcd.print(key);
          
          // If we have all 4 digits, validate the time
          if (currentTime.length() == 4) {
            if (isValidTime(currentTime)) {
              timeSet = true;
              lcd.clear();
              lcd.print("Set reminder:");
              lcd.setCursor(0, 1);
              lcd.print("Format: HHMM");
            } else {
              lcd.clear();
              lcd.print("Invalid time!");
              delay(1000);
              lcd.clear();
              lcd.print("Set current time:");
              lcd.setCursor(0, 1);
              lcd.print("Format: HHMM");
              currentTime = ""; // Reset for new input
            }
          }
        }
      }
    }
    else if (!reminderSet) {
      if (isdigit(key)) {
        if (reminderTime.length() < 4) {
          reminderTime += key;
          lcd.setCursor(reminderTime.length()-1, 1);
          lcd.print(key);
          
          // If we have all 4 digits, validate the reminder time
          if (reminderTime.length() == 4) {
            if (isValidTime(reminderTime)) {
              reminderSet = true;
              
              // Calculate time difference
              int currentHours = currentTime.substring(0,2).toInt();
              int currentMinutes = currentTime.substring(2,4).toInt();
              int reminderHours = reminderTime.substring(0,2).toInt();
              int reminderMinutes = reminderTime.substring(2,4).toInt();
              
              int currentTotalMinutes = currentHours * 60 + currentMinutes;
              int reminderTotalMinutes = reminderHours * 60 + reminderMinutes;
              
              // If reminder is earlier than current time, add 24 hours
              if (reminderTotalMinutes <= currentTotalMinutes) {
                reminderTotalMinutes += 24 * 60;
              }
              
              timerDuration = (unsigned long)(reminderTotalMinutes - currentTotalMinutes) * 60000; // Convert to milliseconds
              lastMillis = millis();
              
              lcd.clear();
              lcd.print("Reminder set for:");
              lcd.setCursor(0, 1);
              lcd.print(reminderTime.substring(0,2) + ":" + reminderTime.substring(2,4));
            } else {
              lcd.clear();
              lcd.print("Invalid time!");
              delay(1000);
              lcd.clear();
              lcd.print("Set reminder:");
              lcd.setCursor(0, 1);
              lcd.print("Format: HHMM");
              reminderTime = ""; // Reset for new input
            }
          }
        }
      }
    }
    else {
      // Timer is running - check for reminder
      if (millis() - lastMillis >= timerDuration) {
        lcd.clear();
        lcd.print("TAKE YOUR PILLS!");
        // Add buzzer code here if needed
        delay(5000);
        lastMillis = millis(); // Reset timer
      }
      else {
        // Show countdown
        unsigned long remainingTime = (timerDuration - (millis() - lastMillis)) / 60000;
        lcd.clear();
        lcd.print("Next dose in:");
        lcd.setCursor(0, 1);
        lcd.print(remainingTime);
        lcd.print(" minutes");
        delay(60000); // Update every minute
      }
    }
  }
}
